<?php

namespace UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserLoaderInterface
{
    /**
     * @param string $emailOrUsername
     *
     * @return mixed
     */
    public function findOneByEmailOrUsername(string $emailOrUsername)
    {
        try {
            return $this->createQueryBuilder('u')
                ->orWhere('u.email = :emailOrUsername', 'u.username = :emailOrUsername')
                ->setParameter('emailOrUsername', $emailOrUsername)
                ->setMaxResults(1)
                ->getQuery()
                ->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * @param string $keyword
     * @param bool   $findAll
     *
     * @return array
     */
    public function findByEmailOrUsername(string $keyword, bool $findAll = false)
    {
        $qb = $this->createQueryBuilder('u')
            ->orWhere('u.email LIKE :keyword', 'u.username LIKE :keyword')
            ->setParameter('keyword', '%'.$keyword.'%')
        ;

        if (false === $findAll) {
            $qb
                ->andWhere('u.activated = :activated')->setParameter('activated', true)
                ->andWhere('u.deleted = :deleted')->setParameter('deleted', false)
                ->andWhere('u.locked = :locked')->setParameter('locked', false)
                ->setMaxResults(8)
            ;
        }

        $qb->orderBy('u.id', 'DESC');

        return $qb
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * @param int $dayOfYear
     *
     * @return mixed
     */
    public function findByDayOfYear(int $dayOfYear)
    {
        try {
            return $this->createQueryBuilder('u')
                ->select('COUNT(u)')
                ->where('DAYOFYEAR(u.registerAt) = :dayOfYear')
                ->andWhere('YEAR(u.registerAt) = :year')
                ->setParameter('dayOfYear', $dayOfYear)
                ->setParameter('year', (new \DateTime())->format('Y'))
                ->getQuery()
                ->getSingleScalarResult()
            ;
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * @param int $weekOfYear
     *
     * @return mixed
     */
    public function findByWeekOfYear(int $weekOfYear)
    {
        try {
            return $this->createQueryBuilder('u')
                ->select('COUNT(u)')
                ->where('WEEK(u.registerAt, 7) = :weekOfYear')
                ->andWhere('YEAR(u.registerAt) = :year')
                ->setParameter('weekOfYear', $weekOfYear)
                ->setParameter('year', (new \DateTime())->format('Y'))
                ->getQuery()
                ->getSingleScalarResult()
            ;
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * @param int $monthOfYear
     *
     * @return mixed
     */
    public function findByMonthOfYear(int $monthOfYear)
    {
        try {
            return $this->createQueryBuilder('u')
                ->select('COUNT(u)')
                ->where('MONTH(u.registerAt) = :monthOfYear')
                ->andWhere('YEAR(u.registerAt) = :year')
                ->setParameter('monthOfYear', $monthOfYear)
                ->setParameter('year', (new \DateTime())->format('Y'))
                ->getQuery()
                ->getSingleScalarResult()
            ;
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * @param string $keyword
     *
     * @return array
     */
    public function search(string $keyword)
    {
        return $this->createQueryBuilder('u')
            ->orWhere('u.email LIKE :keyword', 'u.username LIKE :keyword')
            ->setParameter('keyword', '%'.$keyword.'%')
            ->orderBy('u.id', 'DESC')
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * {@inheritdoc}
     */
    public function loadUserByUsername($username)
    {
        return $this->createQueryBuilder('u')
            ->orWhere('u.username = :usernameOrEmail', 'u.email = :usernameOrEmail')
            ->setParameter('usernameOrEmail', $username)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }
}
