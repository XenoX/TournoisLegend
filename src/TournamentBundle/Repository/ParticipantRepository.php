<?php

namespace TournamentBundle\Repository;

use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\Query\Expr\Join;
use AppBundle\Entity\Game;
use TournamentBundle\Entity\Participant;
use TournamentBundle\Entity\Tournament;
use TournamentBundle\Workflow\ParticipantWorkflow;
use TournamentBundle\Workflow\TournamentWorkflow;
use UserBundle\Entity\Team;
use UserBundle\Entity\User;

/**
 * ParticipantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ParticipantRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param User|null $user
     * @param Team|null $team
     * @param int       $limit
     *
     * @return array|Participant|null
     */
    public function findProfileLastTournaments(User $user = null, Team $team = null, int $limit)
    {
        $qb = $this->createQueryBuilder('p');

        $where = $user ? 'p.user = :userOrTeam' : 'p.team = :userOrTeam';

        $query = $qb
            ->join(Tournament::class, 't', Join::WITH, 'p.tournament = t.id')
            ->where($where)
            ->andWhere('t.state = :done')
            ->setParameter('userOrTeam', $user ?? $team)
            ->setParameter('done', TournamentWorkflow::STATE_DONE)
            ->groupBy('t.id')
            ->orderBy('p.id', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
        ;

        if (1 === $limit) {
            try {
                return $query->getOneOrNullResult();
            } catch (NonUniqueResultException $e) {
                return null;
            }
        }

        return $query->getResult();
    }

    /**
     * @param User|null $user
     * @param Team|null $team
     * @param int       $limit
     *
     * @return array|Participant|null
     */
    public function findProfileNextTournaments(User $user = null, Team $team = null, int $limit)
    {
        $qb = $this->createQueryBuilder('p');

        $where = $user ? 'p.user = :userOrTeam' : 'p.team = :userOrTeam';

        $query = $qb
            ->join(Tournament::class, 't', Join::WITH, 'p.tournament = t.id')
            ->where($where)
            ->andWhere('t.state != :done')
            ->setParameter('userOrTeam', $user ?? $team)
            ->setParameter('done', TournamentWorkflow::STATE_DONE)
            ->groupBy('t.id')
            ->orderBy('p.id', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
        ;

        if (1 === $limit) {
            try {
                return $query->getOneOrNullResult();
            } catch (NonUniqueResultException $e) {
                return null;
            }
        }

        return $query->getResult();
    }

    /**
     * @param User $user
     * @param int  $limit
     *
     * @return Participant|array|null
     */
    public function findLastParticipantForUser(User $user, int $limit)
    {
        $query = $this->createQueryBuilder('p')
            ->join(Tournament::class, 't')
            ->where('p.user = :user')
            ->andWhere('p.tag IS NOT NULL')
            ->setParameter('user', $user)
            ->orderBy('p.id', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
        ;

        if (1 === $limit) {
            try {
                return $query->getOneOrNullResult();
            } catch (NonUniqueResultException $e) {
                return null;
            }
        }

        return $query->getResult();
    }

    /**
     * @param User       $user
     * @param Tournament $tournament
     * @param Team       $team
     *
     * @return Participant|null
     */
    public function findAlreadyRegisteredWithAnotherTeam(User $user, Tournament $tournament, Team $team)
    {
        try {
            return $this->createQueryBuilder('p')
                ->where('p.user = :user')
                ->andWhere('p.tournament = :tournament')
                ->andWhere('p.team <> :team')
                ->setParameter('user', $user)
                ->setParameter('tournament', $tournament)
                ->setParameter('team', $team)
                ->setMaxResults(1)
                ->getQuery()
                ->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * @param string $tag
     *
     * @return mixed
     */
    public function getBanParticipantWithTag(string $tag)
    {
        try {
            return $this->createQueryBuilder('p')
                ->join(User::class, 'u')
                ->where('u.locked = :locked')
                ->andWhere('p.tag = :tag')
                ->setParameter('locked', true)
                ->setParameter('tag', $tag)
                ->setMaxResults(1)
                ->getQuery()
                ->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }

    /**
     * @param Tournament $tournament
     *
     * @return mixed
     */
    public function countCheckInParticipantForTournament(Tournament $tournament)
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->select('COUNT(p)')
            ->where('p.tournament = :tournament')
            ->andWhere('p.state = :state')
            ->setParameter('tournament', $tournament)
            ->setParameter('state', ParticipantWorkflow::STATE_CHECKED_IN)
        ;

        if ($tournament->isTeam()) {
            return $queryBuilder->addGroupBy('p.team')->getQuery()->getScalarResult();
        }

        try {
            return $queryBuilder->getQuery()->getSingleScalarResult();
        } catch (NonUniqueResultException $e) {
            return null;
        }
    }
}
